"""
üöÄ STOKKEL DASHBOARD V2 - COMPOSANTS INTELLIGENTS
===================================================

Composants V2 pour int√©gration progressive dans V1:
1. Smart KPIs avec contexte et insights
2. Decision Intelligence Panel
3. Auto-Annotated Charts
4. Business Context enrichi

USAGE:
from components.v2_components import (
    SmartKPI,
    DecisionIntelligencePanel,
    SmartChart,
    BusinessContextKPI
)
"""

import streamlit as st
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

# ============================================
# DATA MODELS
# ============================================

class TrendDirection(Enum):
    """Direction de tendance"""
    UP = "üìà"
    DOWN = "üìâ"
    STABLE = "‚û°Ô∏è"

class UrgencyLevel(Enum):
    """Niveau d'urgence"""
    CRITICAL = "üî¥"
    HIGH = "üü†"
    MEDIUM = "üü°"
    LOW = "üü¢"

@dataclass
class Insight:
    """Un insight automatique"""
    text: str
    confidence: float  # 0-1
    supporting_data: Dict
    actions: List[str]

@dataclass
class Scenario:
    """Un sc√©nario de d√©cision"""
    name: str
    cost: float
    roi: float
    risk_probability: float
    expected_outcome: float
    pros: List[str]
    cons: List[str]

# ============================================
# 1. SMART KPI - KPI INTELLIGENT
# ============================================

class SmartKPI:
    """
    KPI Intelligent avec contexte, benchmarks et insights automatiques
    
    Example:
        kpi = SmartKPI(
            label="Pr√©cision Pr√©visions",
            value=87.3,
            target=90,
            previous=85.2,
            benchmark=82
        )
        kpi.render()
    """
    
    def __init__(
        self,
        label: str,
        value: float,
        target: Optional[float] = None,
        previous: Optional[float] = None,
        benchmark: Optional[float] = None,
        unit: str = "%",
        icon: str = "üìä",
        trend_data: Optional[List[float]] = None
    ):
        self.label = label
        self.value = value
        self.target = target
        self.previous = previous
        self.benchmark = benchmark
        self.unit = unit
        self.icon = icon
        self.trend_data = trend_data or []
    
    def calculate_gap_to_target(self) -> Tuple[float, str]:
        """Calcule l'√©cart √† l'objectif"""
        if self.target is None:
            return 0, ""
        
        gap = self.value - self.target
        if abs(gap) < 0.5:
            status = "üéØ Objectif atteint"
        elif gap > 0:
            status = f"‚úÖ Au-dessus de {abs(gap):.1f}{self.unit}"
        else:
            status = f"‚ö†Ô∏è En dessous de {abs(gap):.1f}{self.unit}"
        
        return gap, status
    
    def calculate_mom_change(self) -> Tuple[float, TrendDirection]:
        """Calcule changement vs mois pr√©c√©dent"""
        if self.previous is None:
            return 0, TrendDirection.STABLE
        
        change = self.value - self.previous
        pct_change = (change / self.previous) * 100
        
        if abs(pct_change) < 2:
            direction = TrendDirection.STABLE
        elif pct_change > 0:
            direction = TrendDirection.UP
        else:
            direction = TrendDirection.DOWN
        
        return pct_change, direction
    
    def compare_to_benchmark(self) -> Tuple[float, str]:
        """Compare au benchmark secteur"""
        if self.benchmark is None:
            return 0, ""
        
        diff = self.value - self.benchmark
        if abs(diff) < 1:
            status = "‚âà √âquivalent secteur"
        elif diff > 0:
            status = f"üèÜ {abs(diff):.1f}{self.unit} au-dessus secteur"
        else:
            status = f"‚ö†Ô∏è {abs(diff):.1f}{self.unit} en dessous secteur"
        
        return diff, status
    
    def generate_auto_insight(self) -> Insight:
        """G√©n√®re insight automatique bas√© sur les donn√©es"""
        
        gap, _ = self.calculate_gap_to_target()
        mom_change, direction = self.calculate_mom_change()
        bench_diff, _ = self.compare_to_benchmark()
        
        # Logique d'insight intelligente
        if gap >= 0 and mom_change > 0 and bench_diff > 0:
            text = f"Excellente performance ! {direction.value} progression continue. Maintenir cette trajectoire."
            confidence = 0.9
            actions = ["Documenter les bonnes pratiques", "Partager avec l'√©quipe"]
        
        elif gap < 0 and mom_change > 0:
            text = f"En progression {direction.value} (+{abs(mom_change):.1f}%). Objectif atteignable sous {abs(gap / mom_change):.0f} mois."
            confidence = 0.85
            actions = ["Continuer les efforts actuels", "Monitorer hebdomadairement"]
        
        elif gap >= 0 and mom_change < 0:
            text = f"‚ö†Ô∏è D√©gradation d√©tect√©e {direction.value} (-{abs(mom_change):.1f}%). Investigate causes."
            confidence = 0.8
            actions = ["Analyser causes de la baisse", "Mettre en place actions correctives"]
        
        else:
            text = f"Performance {direction.value} stable. Monitoring requis."
            confidence = 0.75
            actions = ["Suivre l'√©volution", "R√©√©valuer objectif si n√©cessaire"]
        
        return Insight(
            text=text,
            confidence=confidence,
            supporting_data={
                'gap': gap,
                'mom_change': mom_change,
                'benchmark_diff': bench_diff
            },
            actions=actions
        )
    
    def render(self):
        """Rend le KPI intelligent avec composants Streamlit natifs"""
        
        gap, gap_status = self.calculate_gap_to_target()
        mom_change, direction = self.calculate_mom_change()
        bench_diff, bench_status = self.compare_to_benchmark()
        insight = self.generate_auto_insight()
        
        # Utiliser les composants Streamlit natifs - plus fiable
        with st.container():
            # Titre du KPI
            st.markdown(f"**{self.icon} {self.label}**")
            
            # Valeur principale avec st.metric
            if self.target:
                delta_value = f"{self.value - self.target:+.1f}{self.unit}" if self.value != self.target else None
                st.metric(
                    label="",
                    value=f"{self.value:.1f}{self.unit}",
                    delta=delta_value
                )
            else:
                st.metric(
                    label="",
                    value=f"{self.value:.1f}{self.unit}",
                    delta=None
                )
            
            # Informations suppl√©mentaires
            if self.target:
                st.caption(f"Objectif: {self.target:.1f}{self.unit}")
            
            if self.previous:
                st.caption(f"vs Mois dernier: {self.previous:.1f}{self.unit} ({direction.value} {mom_change:+.1f}%)")
            
            if self.benchmark:
                st.caption(f"Benchmark: {self.benchmark:.1f}{self.unit}")
        
        # Contexte d√©taill√© dans expander
        with st.expander("üìä Contexte & Insights", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üìç Contexte**")
                
                if self.target:
                    st.markdown(f"üéØ **Objectif:** {self.target:.1f}{self.unit}")
                    st.markdown(f"‚îî‚îÄ {gap_status}")
                
                if self.previous:
                    st.markdown(f"üìà **vs Mois dernier:** {self.previous:.1f}{self.unit}")
                    st.markdown(f"‚îî‚îÄ {direction.value} {mom_change:+.1f}%")
                
                if self.benchmark:
                    st.markdown(f"üèÜ **Benchmark secteur:** {self.benchmark:.1f}{self.unit}")
                    st.markdown(f"‚îî‚îÄ {bench_status}")
            
            with col2:
                st.markdown(f"**üí° Insight (Confiance: {insight.confidence*100:.0f}%)**")
                st.info(insight.text)
                
                if insight.actions:
                    st.markdown("**‚ö° Actions Sugg√©r√©es:**")
                    for i, action in enumerate(insight.actions, 1):
                        st.markdown(f"{i}. {action}")
            
            # Mini sparkline si donn√©es de tendance
            if self.trend_data:
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    y=self.trend_data,
                    mode='lines',
                    fill='tozeroy',
                    line=dict(color='#D2691E', width=2),
                    fillcolor='rgba(210, 105, 30, 0.1)'
                ))
                fig.update_layout(
                    height=100,
                    margin=dict(l=0, r=0, t=0, b=0),
                    showlegend=False,
                    xaxis=dict(showgrid=False, showticklabels=False),
                    yaxis=dict(showgrid=False, showticklabels=False)
                )
                st.plotly_chart(fig, use_container_width=True)


# ============================================
# 2. DECISION INTELLIGENCE PANEL
# ============================================

class DecisionIntelligencePanel:
    """
    Panneau d'aide √† la d√©cision avec priorisation et simulation
    
    Example:
        panel = DecisionIntelligencePanel(recommendations)
        panel.render()
    """
    
    def __init__(self, recommendations: List[Dict]):
        self.recommendations = recommendations
    
    def calculate_priority_score(self, recommendation: Dict) -> float:
        """Calcule score de priorit√© (ROI √ó Urgence √ó Confiance)"""
        
        roi = recommendation.get('roi', 0)
        urgency = self._urgency_to_score(recommendation.get('urgency', 'low'))
        confidence = recommendation.get('confidence', 0.5)
        
        # Score pond√©r√©
        score = (roi / 1000) * urgency * confidence
        
        return score
    
    def _urgency_to_score(self, urgency: str) -> float:
        """Convertit urgence en score"""
        mapping = {
            'critical': 1.0,
            'high': 0.75,
            'medium': 0.5,
            'low': 0.25
        }
        return mapping.get(urgency.lower(), 0.5)
    
    def prioritize_recommendations(self) -> List[Dict]:
        """Trie recommandations par priorit√©"""
        
        scored = []
        for rec in self.recommendations:
            score = self.calculate_priority_score(rec)
            scored.append({**rec, 'priority_score': score})
        
        return sorted(scored, key=lambda x: x['priority_score'], reverse=True)
    
    def create_scenarios(self, recommendation: Dict) -> List[Scenario]:
        """Cr√©e sc√©narios de d√©cision"""
        
        base_qty = recommendation.get('quantity_to_order', 50)
        unit_cost = recommendation.get('unit_cost', 500)
        expected_revenue = recommendation.get('expected_revenue', 120000)
        
        scenarios = []
        
        # Sc√©nario A: Recommandation IA
        scenarios.append(Scenario(
            name="Sc√©nario A: Recommandation IA",
            cost=base_qty * unit_cost,
            roi=(expected_revenue - (base_qty * unit_cost)) / (base_qty * unit_cost) * 100,
            risk_probability=0.02,
            expected_outcome=expected_revenue,
            pros=[
                "ROI maximal",
                "Risque minimal de rupture (2%)",
                "Optimis√© par IA"
            ],
            cons=[
                "Investissement plus √©lev√©"
            ]
        ))
        
        # Sc√©nario B: Quantit√© r√©duite
        reduced_qty = int(base_qty * 0.6)
        reduced_revenue = expected_revenue * 0.7
        scenarios.append(Scenario(
            name="Sc√©nario B: Quantit√© R√©duite",
            cost=reduced_qty * unit_cost,
            roi=(reduced_revenue - (reduced_qty * unit_cost)) / (reduced_qty * unit_cost) * 100,
            risk_probability=0.15,
            expected_outcome=reduced_revenue,
            pros=[
                "Investissement r√©duit",
                "ROI% plus √©lev√©"
            ],
            cons=[
                "Risque rupture (15%)",
                "CA potentiel r√©duit"
            ]
        ))
        
        # Sc√©nario C: Ne rien faire
        scenarios.append(Scenario(
            name="Sc√©nario C: Ne Rien Faire",
            cost=0,
            roi=-100,
            risk_probability=0.87,
            expected_outcome=-recommendation.get('stockout_cost', 200000),
            pros=[
                "Aucun co√ªt imm√©diat"
            ],
            cons=[
                "Rupture quasi-certaine (87%)",
                "Perte CA importante",
                "Insatisfaction clients"
            ]
        ))
        
        return scenarios
    
    def render(self):
        """Rend le panneau de d√©cision"""
        
        st.markdown("## üéØ Decision Intelligence Center")
        st.markdown("*Actions prioritaires tri√©es par ROI et impact*")
        
        # Prioriser
        prioritized = self.prioritize_recommendations()
        
        # Top 3 actions
        st.markdown("### üî• TOP 3 ACTIONS √Ä FORT IMPACT")
        
        for i, rec in enumerate(prioritized[:3], 1):
            urgency_emoji = {
                'critical': 'üî¥',
                'high': 'üü†',
                'medium': 'üü°',
                'low': 'üü¢'
            }.get(rec.get('urgency', 'medium').lower(), 'üü°')
            
            with st.container():
                st.markdown(f"""
                    <div style="
                        background: white;
                        border: 3px solid {'#E53E3E' if rec.get('urgency') == 'critical' else '#E8E8E8'};
                        border-radius: 12px;
                        padding: 24px;
                        margin-bottom: 24px;
                        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
                    ">
                        <div style="font-size: 20px; font-weight: 700; color: #1B4965; margin-bottom: 8px;">
                            #{i} {rec.get('title', 'Action')}
                        </div>
                        <div style="font-size: 14px; color: #6B6B6B; margin-bottom: 16px;">
                            Priorit√©: {urgency_emoji} {rec.get('urgency', 'MEDIUM').upper()} | 
                            Confiance: {rec.get('confidence', 0.8)*100:.0f}%
                        </div>
                    </div>
                """, unsafe_allow_html=True)
                
                # Tabs: Impact / Simulation / D√©tails
                tab1, tab2, tab3 = st.tabs(["üí∞ Impact", "üé≤ Simulation", "üîç D√©tails"])
                
                with tab1:
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        st.metric(
                            "Investissement",
                            f"{rec.get('cost', 25000):,.0f} FCFA",
                            help="Co√ªt de l'action"
                        )
                    
                    with col2:
                        st.metric(
                            "ROI Attendu",
                            f"+{rec.get('roi', 95000):,.0f} FCFA",
                            f"{rec.get('roi_percent', 380):.0f}%",
                            help="Retour sur investissement"
                        )
                    
                    with col3:
                        st.metric(
                            "Risque Inaction",
                            f"{rec.get('risk_probability', 0.87)*100:.0f}%",
                            f"-{rec.get('inaction_cost', 200000):,.0f} FCFA",
                            delta_color="inverse",
                            help="Risque si action non prise"
                        )
                
                with tab2:
                    st.markdown("**üé≤ Comparaison de Sc√©narios**")
                    
                    scenarios = self.create_scenarios(rec)
                    
                    scenario_data = []
                    for scenario in scenarios:
                        scenario_data.append({
                            'Sc√©nario': scenario.name,
                            'Co√ªt': f"{scenario.cost:,.0f} FCFA",
                            'ROI': f"{scenario.roi:.0f}%",
                            'Risque': f"{scenario.risk_probability*100:.0f}%",
                            'R√©sultat': f"{scenario.expected_outcome:,.0f} FCFA"
                        })
                    
                    df_scenarios = pd.DataFrame(scenario_data)
                    st.dataframe(df_scenarios, width='stretch', hide_index=True)
                    
                    # Recommandation
                    st.success(f"üí° **Recommandation:** {scenarios[0].name} - ROI maximal avec risque minimal")
                    
                    # Slider interactif
                    st.markdown("**Ajuster la quantit√©:**")
                    qty = st.slider(
                        "Quantit√© √† commander",
                        min_value=10,
                        max_value=100,
                        value=rec.get('quantity_to_order', 50),
                        step=5,
                        key=f"qty_slider_{i}"
                    )
                    
                    # Calcul dynamique
                    dynamic_cost = qty * rec.get('unit_cost', 500)
                    dynamic_roi = (rec.get('expected_revenue', 120000) - dynamic_cost) / dynamic_cost * 100
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.metric("Co√ªt Simul√©", f"{dynamic_cost:,.0f} FCFA")
                    with col2:
                        st.metric("ROI Simul√©", f"{dynamic_roi:.0f}%")
                
                with tab3:
                    st.markdown("**üìä Contexte Op√©rationnel**")
                    
                    context_data = {
                        'Stock Actuel': rec.get('current_stock', 25),
                        'Consommation/jour': rec.get('daily_consumption', 5),
                        'Autonomie Actuelle': f"{rec.get('current_stock', 25) / rec.get('daily_consumption', 5):.0f} jours",
                        'D√©lai R√©appro': f"{rec.get('lead_time', 7)} jours",
                        'MOQ Fournisseur': rec.get('moq', 10),
                        'Fiabilit√© Fournisseur': f"{rec.get('supplier_reliability', 0.92)*100:.0f}%"
                    }
                    
                    for key, value in context_data.items():
                        st.markdown(f"**{key}:** {value}")
                    
                    st.markdown("---")
                    st.markdown("**üí° Pourquoi Maintenant?**")
                    st.info(rec.get('reasoning', "Action recommand√©e par l'IA bas√©e sur l'analyse des donn√©es historiques et des tendances actuelles."))
                
                # Actions
                col1, col2, col3 = st.columns(3)
                with col1:
                    if st.button(f"‚úÖ Approuver", key=f"approve_{i}", type="primary"):
                        st.success("‚úÖ Action approuv√©e et ajout√©e √† la file d'ex√©cution")
                
                with col2:
                    if st.button(f"üìã Cr√©er Bon Commande", key=f"order_{i}"):
                        st.info("üìã Bon de commande g√©n√©r√© - √Ä t√©l√©charger")
                
                with col3:
                    if st.button(f"‚è∞ Reporter (+24h)", key=f"snooze_{i}"):
                        st.warning("‚è∞ Action report√©e de 24h - Rappel cr√©√©")


# ============================================
# 3. SMART CHART - GRAPHIQUE INTELLIGENT
# ============================================

class SmartChart:
    """
    Graphique intelligent avec annotations automatiques
    
    Example:
        chart = SmartChart(sales_data, forecast_data)
        chart.render()
    """
    
    def __init__(
        self,
        historical_data: pd.DataFrame,
        forecast_data: Optional[pd.DataFrame] = None
    ):
        self.historical = historical_data
        self.forecast = forecast_data
    
    def detect_significant_events(self) -> List[Dict]:
        """D√©tecte √©v√©nements significatifs (pics, creux)"""
        
        if 'quantity' not in self.historical.columns:
            return []
        
        quantities = self.historical['quantity'].values
        mean = quantities.mean()
        std = quantities.std()
        
        events = []
        
        for idx, row in self.historical.iterrows():
            qty = row['quantity']
            z_score = (qty - mean) / std
            
            if abs(z_score) > 2:  # √âv√©nement significatif
                event_type = "Pic" if z_score > 0 else "Creux"
                magnitude = abs((qty - mean) / mean * 100)
                
                events.append({
                    'date': row.get('date', idx),
                    'type': event_type,
                    'value': qty,
                    'magnitude': magnitude,
                    'label': f"{event_type} +{magnitude:.0f}%" if z_score > 0 else f"{event_type} -{magnitude:.0f}%"
                })
        
        return events
    
    def detect_anomalies(self) -> List[Dict]:
        """D√©tecte anomalies dans les donn√©es"""
        
        # M√©thode IQR simple
        Q1 = self.historical['quantity'].quantile(0.25)
        Q3 = self.historical['quantity'].quantile(0.75)
        IQR = Q3 - Q1
        
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        
        anomalies = []
        
        for idx, row in self.historical.iterrows():
            qty = row['quantity']
            
            if qty < lower_bound or qty > upper_bound:
                anomalies.append({
                    'date': row.get('date', idx),
                    'value': qty,
                    'type': 'high' if qty > upper_bound else 'low'
                })
        
        return anomalies
    
    def detect_patterns(self) -> Dict:
        """D√©tecte patterns (tendance, saisonnalit√©)"""
        
        quantities = self.historical['quantity'].values
        
        # Tendance simple (r√©gression lin√©aire)
        x = np.arange(len(quantities))
        slope = np.polyfit(x, quantities, 1)[0]
        
        if abs(slope) < 0.1:
            trend = "Stable"
            trend_emoji = "‚û°Ô∏è"
        elif slope > 0:
            trend = "Croissante"
            trend_emoji = "üìà"
        else:
            trend = "D√©croissante"
            trend_emoji = "üìâ"
        
        # Variabilit√©
        cv = (quantities.std() / quantities.mean()) * 100
        
        if cv < 10:
            variability = "Faible"
        elif cv < 25:
            variability = "Mod√©r√©e"
        else:
            variability = "√âlev√©e"
        
        return {
            'trend': trend,
            'trend_emoji': trend_emoji,
            'trend_slope': slope,
            'variability': variability,
            'coefficient_variation': cv
        }
    
    def render(self):
        """Rend le graphique intelligent"""
        
        fig = go.Figure()
        
        # Historique
        fig.add_trace(go.Scatter(
            x=self.historical.get('date', self.historical.index),
            y=self.historical['quantity'],
            name='Ventes Historiques',
            line=dict(color='#1B4965', width=2),
            mode='lines+markers',
            marker=dict(size=6)
        ))
        
        # Pr√©visions si disponibles
        if self.forecast is not None:
            fig.add_trace(go.Scatter(
                x=self.forecast.get('date', self.forecast.index),
                y=self.forecast.get('p50', self.forecast['quantity']),
                name='Pr√©vision (P50)',
                line=dict(color='#D2691E', width=2, dash='dash')
            ))
            
            # Bandes de confiance
            if 'p10' in self.forecast.columns and 'p90' in self.forecast.columns:
                fig.add_trace(go.Scatter(
                    x=self.forecast.get('date', self.forecast.index),
                    y=self.forecast['p90'],
                    fill=None,
                    mode='lines',
                    line=dict(color='rgba(210, 105, 30, 0)'),
                    showlegend=False
                ))
                
                fig.add_trace(go.Scatter(
                    x=self.forecast.get('date', self.forecast.index),
                    y=self.forecast['p10'],
                    fill='tonexty',
                    mode='lines',
                    line=dict(color='rgba(210, 105, 30, 0)'),
                    fillcolor='rgba(210, 105, 30, 0.2)',
                    name='Intervalle Confiance (P10-P90)'
                ))
        
        # Annotations automatiques
        events = self.detect_significant_events()
        for event in events[:5]:  # Max 5 annotations
            fig.add_annotation(
                x=event['date'],
                y=event['value'],
                text=event['label'],
                showarrow=True,
                arrowhead=2,
                arrowsize=1,
                arrowwidth=2,
                arrowcolor='#D2691E',
                bgcolor='white',
                bordercolor='#D2691E',
                borderwidth=2
            )
        
        # Layout
        fig.update_layout(
            title="Ventes Historiques et Pr√©visions avec √âv√©nements Cl√©s",
            xaxis_title="Date",
            yaxis_title="Quantit√©",
            height=500,
            template='plotly_white',
            hovermode='x unified',
            showlegend=True
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Insights automatiques
        patterns = self.detect_patterns()
        anomalies = self.detect_anomalies()
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "Tendance D√©tect√©e",
                patterns['trend'],
                patterns['trend_emoji']
            )
        
        with col2:
            st.metric(
                "Variabilit√©",
                patterns['variability'],
                f"{patterns['coefficient_variation']:.1f}%"
            )
        
        with col3:
            st.metric(
                "Anomalies",
                len(anomalies),
                "√Ä investiguer" if len(anomalies) > 0 else "Aucune"
            )
        
        # Insights textuels
        with st.expander("üí° Insights Automatiques", expanded=True):
            st.markdown("**üìä Analyse des Patterns:**")
            st.info(f"""
            - **Tendance:** {patterns['trend_emoji']} {patterns['trend']} (pente: {patterns['trend_slope']:.2f})
            - **Variabilit√©:** {patterns['variability']} (CV: {patterns['coefficient_variation']:.1f}%)
            - **√âv√©nements d√©tect√©s:** {len(events)} pics/creux significatifs
            - **Anomalies:** {len(anomalies)} valeurs atypiques d√©tect√©es
            """)
            
            if events:
                st.markdown("**üî• √âv√©nements Majeurs:**")
                for event in events[:3]:
                    st.markdown(f"- {event['date']}: {event['label']}")


# ============================================
# 4. BUSINESS CONTEXT KPI
# ============================================

class BusinessContextKPI:
    """
    KPI avec contexte m√©tier enrichi (co√ªts, d√©lais, ROI)
    
    Example:
        kpi = BusinessContextKPI(
            metric="Stock Actuel",
            value=25,
            context={
                "cost_per_unit": 500,
                "holding_cost_rate": 0.15,
                "lead_time_days": 7
            }
        )
        kpi.render()
    """
    
    def __init__(
        self,
        metric: str,
        value: float,
        context: Dict,
        unit: str = "unit√©s",
        icon: str = "üì¶"
    ):
        self.metric = metric
        self.value = value
        self.context = context
        self.unit = unit
        self.icon = icon
    
    def calculate_financial_impact(self) -> Dict:
        """Calcule l'impact financier"""
        
        cost_per_unit = self.context.get('cost_per_unit', 0)
        holding_cost_rate = self.context.get('holding_cost_rate', 0.15)
        
        total_value = self.value * cost_per_unit
        monthly_holding_cost = total_value * (holding_cost_rate / 12)
        
        return {
            'total_value': total_value,
            'monthly_holding_cost': monthly_holding_cost,
            'annual_holding_cost': total_value * holding_cost_rate
        }
    
    def calculate_time_constraints(self) -> Dict:
        """Calcule les contraintes temporelles"""
        
        lead_time = self.context.get('lead_time_days', 7)
        daily_consumption = self.context.get('daily_consumption', 1)
        
        autonomy_days = self.value / daily_consumption if daily_consumption > 0 else 0
        reorder_point_days = lead_time + 2  # +2 jours de s√©curit√©
        
        return {
            'autonomy_days': autonomy_days,
            'reorder_point_days': reorder_point_days,
            'lead_time_days': lead_time,
            'is_critical': autonomy_days <= reorder_point_days
        }
    
    def generate_business_insight(self) -> str:
        """G√©n√®re insight m√©tier"""
        
        financial = self.calculate_financial_impact()
        time_constraints = self.calculate_time_constraints()
        
        if time_constraints['is_critical']:
            return f"üö® **CRITIQUE** - Stock insuffisant ({time_constraints['autonomy_days']:.0f}j) pour couvrir d√©lai r√©appro ({time_constraints['lead_time_days']}j). Commander imm√©diatement."
        elif time_constraints['autonomy_days'] < time_constraints['reorder_point_days'] + 3:
            return f"‚ö†Ô∏è **ATTENTION** - Stock faible ({time_constraints['autonomy_days']:.0f}j). Planifier commande sous 2-3 jours."
        else:
            return f"‚úÖ **OPTIMAL** - Stock suffisant ({time_constraints['autonomy_days']:.0f}j). Surveillance normale."
    
    def render(self):
        """Rend le KPI avec contexte m√©tier"""
        
        financial = self.calculate_financial_impact()
        time_constraints = self.calculate_time_constraints()
        insight = self.generate_business_insight()
        
        # Container principal
        st.markdown(f"""
            <div style="
                background: white;
                border: 2px solid {'#E53E3E' if time_constraints['is_critical'] else '#E8E8E8'};
                border-radius: 12px;
                padding: 24px;
                box-shadow: 0 2px 8px rgba(0,0,0,0.04);
            ">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 16px;">
                    <div>
                        <div style="font-size: 14px; color: #6B6B6B; text-transform: uppercase; letter-spacing: 0.05em;">
                            {self.icon} {self.metric}
                        </div>
                    </div>
                    <div style="
                        background: linear-gradient(135deg, #D2691E, #F4A261);
                        width: 40px;
                        height: 40px;
                        border-radius: 8px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        font-size: 20px;
                    ">{self.icon}</div>
                </div>
                
                <div style="font-size: 42px; font-weight: 700; color: #1B4965; margin: 16px 0;">
                    {self.value:.0f} {self.unit}
                </div>
            </div>
        """, unsafe_allow_html=True)
        
        # Contexte m√©tier d√©taill√©
        with st.expander("üíº Contexte M√©tier", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**üí∞ Impact Financier**")
                st.metric("Valeur Stock", f"{financial['total_value']:,.0f} FCFA")
                st.metric("Co√ªt Portage/mois", f"{financial['monthly_holding_cost']:,.0f} FCFA")
                st.metric("Co√ªt Portage/an", f"{financial['annual_holding_cost']:,.0f} FCFA")
            
            with col2:
                st.markdown("**‚è±Ô∏è Contraintes Temporelles**")
                st.metric("Autonomie", f"{time_constraints['autonomy_days']:.0f} jours")
                st.metric("D√©lai R√©appro", f"{time_constraints['lead_time_days']} jours")
                st.metric("Point Commande", f"{time_constraints['reorder_point_days']} jours")
            
            st.markdown("---")
            st.markdown("**üí° Insight M√©tier**")
            st.info(insight)

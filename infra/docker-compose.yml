version: '3.8'

services:
  # =========================================
  # API FastAPI - Backend
  # =========================================
  api:
    build:
      context: ..
      dockerfile: infra/Dockerfile.api
    container_name: stokkel-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      - API_ENV=production
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - LOG_LEVEL=info
    volumes:
      - ../data:/app/data
      - api_models:/app/models
    networks:
      - stokkel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.stokkel.service=api"
      - "com.stokkel.version=1.0.0"

  # =========================================
  # Dashboard Streamlit - Frontend
  # =========================================
  dashboard:
    build:
      context: ..
      dockerfile: infra/Dockerfile.ui
    container_name: stokkel-dashboard
    restart: unless-stopped
    ports:
      - "8501:8501"
    environment:
      - PYTHONUNBUFFERED=1
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - API_BASE_URL=http://api:8000
    depends_on:
      api:
        condition: service_healthy
    networks:
      - stokkel-network
    labels:
      - "com.stokkel.service=dashboard"
      - "com.stokkel.version=1.0.0"

  # =========================================
  # Nginx Reverse Proxy (Optionnel)
  # =========================================
  nginx:
    image: nginx:alpine
    container_name: stokkel-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - dashboard
    networks:
      - stokkel-network
    labels:
      - "com.stokkel.service=reverse-proxy"

  # =========================================
  # PostgreSQL Database (Pour Production)
  # =========================================
  postgres:
    image: postgres:15-alpine
    container_name: stokkel-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=stokkel_db
      - POSTGRES_USER=stokkel_user
      - POSTGRES_PASSWORD=changeme_secure_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - stokkel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stokkel_user -d stokkel_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.stokkel.service=database"

  # =========================================
  # Redis Cache (Pour Performance)
  # =========================================
  redis:
    image: redis:7-alpine
    container_name: stokkel-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass changeme_redis_password
    volumes:
      - redis_data:/data
    networks:
      - stokkel-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.stokkel.service=cache"

  # =========================================
  # Monitoring avec Prometheus (Optionnel)
  # =========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: stokkel-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - stokkel-network
    profiles:
      - monitoring
    labels:
      - "com.stokkel.service=monitoring"

  # =========================================
  # Grafana Dashboard (Optionnel)
  # =========================================
  grafana:
    image: grafana/grafana:latest
    container_name: stokkel-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=changeme_grafana
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - stokkel-network
    profiles:
      - monitoring
    labels:
      - "com.stokkel.service=dashboard-monitoring"

# =========================================
# RÃ‰SEAUX
# =========================================
networks:
  stokkel-network:
    driver: bridge
    name: stokkel-network

# =========================================
# VOLUMES PERSISTANTS
# =========================================
volumes:
  postgres_data:
    name: stokkel-postgres-data
  redis_data:
    name: stokkel-redis-data
  api_models:
    name: stokkel-api-models
  nginx_logs:
    name: stokkel-nginx-logs
  prometheus_data:
    name: stokkel-prometheus-data
  grafana_data:
    name: stokkel-grafana-data
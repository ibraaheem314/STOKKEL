"""
Moteur d'optimisation des stocks pour Stokkel
Calcule les recommandations d'approvisionnement optimales
"""

import numpy as np
import pandas as pd
from typing import Dict, Optional, Tuple
from datetime import datetime, timedelta
import logging
from scipy import stats

from .config import settings
from .schemas import RecommendationResponse

logger = logging.getLogger(__name__)


class StockOptimizer:
    """Optimiseur de stock bas√© sur les pr√©visions probabilistes"""
    
    def __init__(self):
        pass
    
    def generate_recommendation(
        self,
        product_id: str,
        forecast_data: pd.DataFrame,
        current_stock: float,
        lead_time_days: int,
        service_level_percent: int
    ) -> RecommendationResponse:
        """
        G√©n√®re une recommandation d'approvisionnement optimale
        
        Args:
            product_id: Identifiant du produit
            forecast_data: DataFrame avec les pr√©visions (colonnes: date, p10, p50, p90)
            current_stock: Stock actuel en unit√©s
            lead_time_days: D√©lai de livraison fournisseur en jours
            service_level_percent: Niveau de service cible (80-99%)
            
        Returns:
            RecommendationResponse avec l'action recommand√©e
        """
        try:
            logger.info(f"G√©n√©ration de recommandation pour {product_id}")
            
            # Calcul de la demande moyenne journali√®re
            avg_daily_demand = forecast_data['p50'].mean()
            
            # Calcul de la variabilit√© (√©cart-type de la demande)
            demand_std = forecast_data['p50'].std()
            
            # Demande pendant le lead time (Lead Time Demand)
            lead_time_demand = avg_daily_demand * lead_time_days
            
            # Calcul du stock de s√©curit√© dynamique
            safety_stock = self._calculate_safety_stock(
                avg_daily_demand=avg_daily_demand,
                demand_std=demand_std,
                lead_time_days=lead_time_days,
                service_level_percent=service_level_percent
            )
            
            # Point de commande (Reorder Point)
            reorder_point = lead_time_demand + safety_stock
            
            # Analyse du stock actuel
            stock_status, action = self._analyze_stock_status(
                current_stock=current_stock,
                reorder_point=reorder_point,
                safety_stock=safety_stock
            )
            
            # Calcul de la quantit√© √† commander
            if action == "Commander":
                quantity_to_order = self._calculate_order_quantity(
                    current_stock=current_stock,
                    reorder_point=reorder_point,
                    avg_daily_demand=avg_daily_demand,
                    lead_time_days=lead_time_days,
                    safety_stock=safety_stock
                )
            else:
                quantity_to_order = 0.0
            
            # Estimation des jours avant rupture
            days_until_stockout = self._estimate_days_until_stockout(
                current_stock=current_stock,
                avg_daily_demand=avg_daily_demand
            )
            
            # Construction des m√©tadonn√©es
            metadata = {
                'average_daily_demand': round(avg_daily_demand, 2),
                'demand_variability': round(demand_std, 2),
                'lead_time': lead_time_days,
                'service_level': f"{service_level_percent}%",
                'lead_time_demand': round(lead_time_demand, 2),
                'z_score': self._get_z_score(service_level_percent),
                'calculation_method': 'Dynamic Safety Stock with Service Level',
                'recommendation_rationale': self._get_recommendation_rationale(
                    action, current_stock, reorder_point, safety_stock
                )
            }
            
            # Construction de la r√©ponse
            response = RecommendationResponse(
                product_id=product_id,
                recommendation_action=action,
                quantity_to_order=round(quantity_to_order, 2),
                reorder_point=round(reorder_point, 2),
                dynamic_safety_stock=round(safety_stock, 2),
                current_stock_status=stock_status,
                days_until_stockout=days_until_stockout if days_until_stockout else None,
                metadata=metadata
            )
            
            logger.info(f"Recommandation g√©n√©r√©e pour {product_id}: {action}")
            
            return response
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration de recommandation: {str(e)}")
            raise
    
    def _calculate_safety_stock(
        self,
        avg_daily_demand: float,
        demand_std: float,
        lead_time_days: int,
        service_level_percent: int
    ) -> float:
        """
        Calcule le stock de s√©curit√© dynamique
        
        Formule: SS = Z * œÉ_d * ‚àö(LT)
        o√π:
        - Z est le score Z correspondant au niveau de service
        - œÉ_d est l'√©cart-type de la demande journali√®re
        - LT est le lead time en jours
        
        Args:
            avg_daily_demand: Demande moyenne journali√®re
            demand_std: √âcart-type de la demande
            lead_time_days: D√©lai de livraison en jours
            service_level_percent: Niveau de service cible (%)
            
        Returns:
            Stock de s√©curit√© calcul√©
        """
        # Obtention du Z-score correspondant au niveau de service
        z_score = self._get_z_score(service_level_percent)
        
        # Calcul du stock de s√©curit√©
        # Si la variabilit√© est faible, on utilise un pourcentage de la demande moyenne
        if demand_std < 0.1 * avg_daily_demand:
            # Faible variabilit√©: stock de s√©curit√© = % de la demande lead time
            safety_stock = 0.15 * avg_daily_demand * lead_time_days
        else:
            # Variabilit√© normale: formule standard
            safety_stock = z_score * demand_std * np.sqrt(lead_time_days)
        
        # Le stock de s√©curit√© doit √™tre positif
        return max(0, safety_stock)
    
    def _get_z_score(self, service_level_percent: int) -> float:
        """
        Retourne le Z-score correspondant au niveau de service
        
        Args:
            service_level_percent: Niveau de service (80-99%)
            
        Returns:
            Z-score de la distribution normale
        """
        # Conversion en probabilit√© (0-1)
        probability = service_level_percent / 100.0
        
        # Calcul du Z-score (quantile de la loi normale standard)
        z_score = stats.norm.ppf(probability)
        
        return z_score
    
    def _analyze_stock_status(
        self,
        current_stock: float,
        reorder_point: float,
        safety_stock: float
    ) -> Tuple[str, str]:
        """
        Analyse le statut du stock actuel
        
        Args:
            current_stock: Stock actuel
            reorder_point: Point de commande calcul√©
            safety_stock: Stock de s√©curit√©
            
        Returns:
            Tuple (status_description, action_recommended)
        """
        if current_stock <= safety_stock:
            status = "üî¥ Critique - En dessous du stock de s√©curit√©"
            action = "Commander"
        elif current_stock <= reorder_point:
            status = "üü° Attention - En dessous du point de commande"
            action = "Commander"
        elif current_stock <= reorder_point * 1.5:
            status = "üü¢ Normal - Stock suffisant"
            action = "Surveiller"
        else:
            status = "üü¢ Bon - Stock confortable"
            action = "Stock suffisant"
        
        return status, action
    
    def _calculate_order_quantity(
        self,
        current_stock: float,
        reorder_point: float,
        avg_daily_demand: float,
        lead_time_days: int,
        safety_stock: float
    ) -> float:
        """
        Calcule la quantit√© optimale √† commander
        
        Strat√©gie: Commander pour couvrir le lead time + cycle time
        
        Args:
            current_stock: Stock actuel
            reorder_point: Point de commande
            avg_daily_demand: Demande moyenne journali√®re
            lead_time_days: D√©lai de livraison
            safety_stock: Stock de s√©curit√©
            
        Returns:
            Quantit√© √† commander
        """
        # P√©riode de couverture cible (lead time + p√©riode de r√©approvisionnement)
        # On vise √† couvrir 2x le lead time pour √©viter les commandes trop fr√©quentes
        review_period_days = max(14, lead_time_days * 2)
        
        # Stock cible pour la p√©riode de couverture
        target_stock = (avg_daily_demand * review_period_days) + safety_stock
        
        # Quantit√© √† commander = Stock cible - Stock actuel
        order_quantity = target_stock - current_stock
        
        # Minimum de commande: au moins couvrir le lead time
        min_order = avg_daily_demand * lead_time_days
        
        # La quantit√© ne peut pas √™tre n√©gative
        order_quantity = max(0, order_quantity, min_order)
        
        return order_quantity
    
    def _estimate_days_until_stockout(
        self,
        current_stock: float,
        avg_daily_demand: float
    ) -> Optional[int]:
        """
        Estime le nombre de jours avant rupture de stock
        
        Args:
            current_stock: Stock actuel
            avg_daily_demand: Demande moyenne journali√®re
            
        Returns:
            Nombre de jours ou None si stock confortable
        """
        if avg_daily_demand <= 0:
            return None
        
        days = int(current_stock / avg_daily_demand)
        
        # Retourner seulement si risque dans les 30 prochains jours
        if days <= 30:
            return days
        
        return None
    
    def _get_recommendation_rationale(
        self,
        action: str,
        current_stock: float,
        reorder_point: float,
        safety_stock: float
    ) -> str:
        """
        G√©n√®re une explication de la recommandation
        
        Args:
            action: Action recommand√©e
            current_stock: Stock actuel
            reorder_point: Point de commande
            safety_stock: Stock de s√©curit√©
            
        Returns:
            Texte explicatif
        """
        if action == "Commander":
            if current_stock <= safety_stock:
                return (
                    f"Stock actuel ({current_stock:.0f}) en dessous du stock de s√©curit√© "
                    f"({safety_stock:.0f}). Commande urgente recommand√©e pour √©viter la rupture."
                )
            else:
                return (
                    f"Stock actuel ({current_stock:.0f}) en dessous du point de commande "
                    f"({reorder_point:.0f}). Commande recommand√©e pour maintenir le niveau de service."
                )
        elif action == "Surveiller":
            return (
                f"Stock actuel ({current_stock:.0f}) proche du point de commande "
                f"({reorder_point:.0f}). Surveillance recommand√©e."
            )
        else:
            return (
                f"Stock actuel ({current_stock:.0f}) confortable au-dessus du point de commande "
                f"({reorder_point:.0f}). Aucune action n√©cessaire."
            )
    
    def calculate_batch_recommendations(
        self,
        products_forecasts: Dict[str, pd.DataFrame],
        stock_levels: Optional[Dict[str, float]],
        lead_time_days: int,
        service_level_percent: int
    ) -> Dict:
        """
        Calcule les recommandations pour plusieurs produits
        
        Args:
            products_forecasts: Dict {product_id: forecast_dataframe}
            stock_levels: Dict {product_id: current_stock} ou None
            lead_time_days: D√©lai de livraison
            service_level_percent: Niveau de service
            
        Returns:
            Dict avec les recommandations et statistiques
        """
        recommendations = []
        
        for product_id, forecast_df in products_forecasts.items():
            # Stock par d√©faut si non fourni
            current_stock = 0.0
            if stock_levels and product_id in stock_levels:
                current_stock = stock_levels[product_id]
            
            try:
                recommendation = self.generate_recommendation(
                    product_id=product_id,
                    forecast_data=forecast_df,
                    current_stock=current_stock,
                    lead_time_days=lead_time_days,
                    service_level_percent=service_level_percent
                )
                recommendations.append(recommendation)
            except Exception as e:
                logger.error(f"Erreur pour {product_id}: {str(e)}")
                continue
        
        # Statistiques agr√©g√©es
        to_order = [r for r in recommendations if r.recommendation_action == "Commander"]
        
        summary = {
            'total_products': len(recommendations),
            'products_to_order': len(to_order),
            'total_quantity_to_order': sum(r.quantity_to_order for r in to_order),
            'total_safety_stock': sum(r.dynamic_safety_stock for r in recommendations),
            'average_service_level': f"{service_level_percent}%"
        }
        
        return {
            'recommendations': recommendations,
            'summary': summary
        }


# Instance globale de l'optimiseur
stock_optimizer = StockOptimizer()